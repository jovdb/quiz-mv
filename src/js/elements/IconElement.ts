import { cssRule } from "typestyle";
import { exhaustiveFail } from "../utils";
import { Attribute, Component, HyperElement, Watch } from "./HyperElement";

export enum IconNames {
	offline = "offline",
	female = "female",
	male = "male",
	user = "user",
	crown = "crown",
	arrowLeft = "arrowLeft",
	arrowRight = "arrowRight",
}

cssRule("icon-el", {
	$debugName: "icon",
	width: "1em",
	height: "1em",
	display: "inline-block",
	verticalAlign: "middle"
});

@Component({tag: "icon-el"})
export class IconElement extends HyperElement {

	private iconSvg: any;

	private static getIcon(iconName: IconNames) {
		switch (iconName) {
			case IconNames.offline:
				return hyperHTML.wire(undefined, "svg")`<svg version="1.1" viewBox="0 0 512 512">
					<g>
						<path d="M402.048,149.824C387.221,75.968,321.365,21.333,245.333,21.333c-88.235,0-160,71.765-160,160
							c0,3.605,0.149,7.296,0.469,11.2C37.653,197.653,0,238.507,0,288c0,52.928,43.072,96,96,96c5.888,0,10.667-4.779,10.667-10.667
							c0-5.888-4.779-10.667-10.667-10.667c-41.173,0-74.667-33.493-74.667-74.667s33.493-74.667,73.941-74.709
							c0.469,0.085,1.792,0.213,2.261,0.213c2.901-0.32,6.123-1.259,8.192-3.605s3.008-5.483,2.56-8.576
							c-1.109-7.616-1.621-13.973-1.621-19.989c0-76.459,62.208-138.667,138.667-138.667c68.501,0,127.445,51.157,137.109,118.997
							c0.768,5.333,7.019,9.195,12.224,9.003c52.928,0,96,43.072,96,96c0,52.928-43.072,96-96,96c-5.888,0-10.667,4.779-10.667,10.667
							c0,5.888,4.779,10.667,10.667,10.667C459.349,384,512,331.371,512,266.667C512,204.992,464.171,154.283,402.048,149.824z"/>
						<path d="M245.333,256C180.651,256,128,308.629,128,373.333s52.651,117.333,117.333,117.333s117.333-52.629,117.333-117.333
							S310.016,256,245.333,256z M245.333,469.333c-52.928,0-96-43.072-96-96c0-52.928,43.072-96,96-96c52.928,0,96,43.072,96,96
							C341.333,426.261,298.261,469.333,245.333,469.333z"/>
						<path d="M328.277,441.237L177.451,290.389c-4.16-4.16-10.923-4.16-15.083,0c-4.16,4.16-4.16,10.923,0,15.083L313.195,456.32
							c2.091,2.069,4.821,3.115,7.552,3.115c2.731,0,5.461-1.045,7.531-3.115C332.437,452.16,332.437,445.397,328.277,441.237z"/>
					</g>
				</svg>`;

			case IconNames.female:
				return hyperHTML.wire(undefined, "svg")`<svg version="1.1" viewBox="0 0 414.693 414.693">
					<path d="M355.578,148.231C355.578,66.496,289.082,0,207.347,0S59.115,66.496,59.115,148.231 c0,76.672,58.514,139.933,133.231,147.476v47.601h-41.568v30h41.568v41.385h30v-41.385h41.568v-30h-41.568v-47.601 C297.064,288.164,355.578,224.903,355.578,148.231z M89.115,148.231C89.115,83.038,142.153,30,207.347,30 s118.231,53.038,118.231,118.231S272.54,266.462,207.347,266.462S89.115,213.424,89.115,148.231z"/>
				</svg>`;

			case IconNames.male:
				return hyperHTML.wire(undefined, "svg")`<svg version="1.1" viewBox="0 0 351.778 351.778">
					<path d="M321.778,95.024l30-0.049l-0.154-94.821L256.802,0l-0.049,30l43.741,0.071l-58.583,58.583 c-26.385-21.595-59.13-33.339-93.68-33.339c-39.594,0-76.817,15.419-104.814,43.417C15.419,126.729,0,163.953,0,203.547 s15.419,76.818,43.416,104.815s65.221,43.416,104.814,43.416s76.818-15.419,104.815-43.416 c54.215-54.215,57.572-140.324,10.073-198.49l58.588-58.588L321.778,95.024z M231.833,287.149 c-22.331,22.331-52.021,34.629-83.603,34.629S86.96,309.48,64.629,287.149C42.298,264.818,30,235.128,30,203.547 s12.298-61.271,34.629-83.602s52.021-34.629,83.602-34.629c31.581,0,61.271,12.298,83.603,34.629 C277.931,166.044,277.931,241.051,231.833,287.149z"/>
				</svg>`;

			case IconNames.arrowLeft:
				return hyperHTML.wire(undefined, "svg")`<svg version= "1.1" viewBox= "0 0 123.969 123.97">
					<path d="M96.059,24.603c5.799-5.801,5.699-15.301-0.5-20.9c-5.801-5.3-14.801-4.8-20.301,0.8l-47.4,47.3 c-2.8,2.801-4.2,6.5-4.2,10.2s1.4,7.4,4.2,10.2l47.3,47.3c5.5,5.5,14.6,6.101,20.3,0.8c6.101-5.6,6.3-15.1,0.5-20.899l-30.2-30.3 c-3.9-3.9-3.9-10.2,0-14.101L96.059,24.603z" />
				</svg>`;

			case IconNames.arrowRight:
				return hyperHTML.wire(undefined, "svg")`<svg version="1.1" viewBox="0 0 123.97 123.97">
					<path d="M27.961,99.367c-5.8,5.8-5.7,15.3,0.5,20.899c5.8,5.301,14.8,4.801,20.3-0.8l47.3-47.3c2.8-2.8,4.2-6.5,4.2-10.2 s-1.4-7.399-4.2-10.2l-47.2-47.3c-5.5-5.5-14.6-6.1-20.3-0.8c-6.1,5.6-6.3,15.1-0.5,20.9l30.2,30.399c3.9,3.9,3.9,10.2,0,14.101 L27.961,99.367z" />
				</svg>`;

			case IconNames.user:
				return hyperHTML.wire(undefined, "svg")`<svg version="1.1" viewBox="0 0 248.349 248.349">
					<g>
						<path d="M9.954,241.305h228.441c3.051,0,5.896-1.246,7.805-3.416c1.659-1.882,2.393-4.27,2.078-6.723 c-5.357-41.734-31.019-76.511-66.15-95.053c-14.849,14.849-35.348,24.046-57.953,24.046s-43.105-9.197-57.953-24.046 C31.09,154.65,5.423,189.432,0.071,231.166c-0.315,2.453,0.424,4.846,2.078,6.723C4.058,240.059,6.903,241.305,9.954,241.305z" />
						<path d="M72.699,127.09c1.333,1.398,2.725,2.73,4.166,4.019c12.586,11.259,29.137,18.166,47.309,18.166 s34.723-6.913,47.309-18.166c1.441-1.289,2.834-2.622,4.166-4.019c1.327-1.398,2.622-2.828,3.84-4.329 c9.861-12.211,15.8-27.717,15.8-44.6c0-39.216-31.906-71.116-71.116-71.116S53.059,38.95,53.059,78.16 c0,16.883,5.939,32.39,15.8,44.6C70.072,124.262,71.366,125.687,72.699,127.09z" />
					</g>
				</svg>`;

			case IconNames.crown:
				return hyperHTML.wire(undefined, "svg")`<svg version="1.1" viewBox="0 0 981.9 981.901">
					<g>
						<path d="M861,863.05c0-30.4-24.6-55-55-55H175.9c-30.4,0-55,24.6-55,55s24.6,55,55,55H806C836.4,918.05,861,893.35,861,863.05z"/>
						<path d="M65.4,417.85c0.9,0,1.7,0,2.6-0.1l87.2,315.6H491h335.7l87.2-315.6c0.899,0,1.699,0.1,2.6,0.1c36.1,0,65.4-29.3,65.4-65.4s-29.301-65.4-65.4-65.4s-65.4, 29.3-65.4, 65.4c0, 7, 1.101, 13.8, 3.2, 20.1l-157.7, 92.2l-169.5-281c17.601-11.7, 29.301-31.8, 29.301-54.5c0-36.1-29.301-65.4-65.4-65.4s-65.4, 29.3-65.4, 65.4c0, 22.8, 11.601, 42.8, 29.301, 54.5l-169.5, 281l-157.7-92.2c2-6.3, 3.2-13.1, 3.2-20.1c0-36.1-29.3-65.4-65.4-65.4c-36.2, 0-65.5, 29.3-65.5, 65.4S29.3, 417.85, 65.4, 417.85z"/>
					</g>
				</svg>`;
			default:
				if (!IconElement.isValidIconName(iconName)) console.error(`Invalid icon name= '${Object.keys(IconNames).join(", ")}'`);
				exhaustiveFail(iconName);
				return hyperHTML.wire()``;
		}
	}

	@Attribute({attributeName: "name"})
	public iconName?: string;

	@Watch({attributeName: "name"})
	protected onIconNameChanged(_attrName: string, _oldVal: string, newVal: string) {
		if (IconElement.isValidIconName(newVal)) {
			this.iconSvg = IconElement.getIcon(newVal);
			this.invalidate();
		}
	}

	// Watch attributes
	public static isValidIconName(iconName: string): iconName is IconNames {
		return iconName in IconNames;
	}


	public render() {
		return this.html`${this.iconSvg}`;
	}
}